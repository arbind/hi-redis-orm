// Generated by CoffeeScript 1.4.0
(function() {
  var RORMRef, RedisORM,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RORMRef = (function() {

    function RORMRef(rorm_ref) {
      this.rorm_ref = rorm_ref;
    }

    return RORMRef;

  })();

  RedisORM = (function(_super) {
    var NO_REDIS_URL;

    __extends(RedisORM, _super);

    function RedisORM() {
      return RedisORM.__super__.constructor.apply(this, arguments);
    }

    NO_REDIS_URL = new Error("No url configured for RedisORM mixin!");

    RedisORM.addTheseToClass = {
      /*
          #   Some Constants
      */

      rorm_delim: ':',
      rorm_prefix: 'rorm:',
      rorm_TYPE_OBJECT: 'object',
      rorm_TYPE_FUNCTION: 'function',
      rorm_CLASS_ARRAY: 'Array',
      /*
          #   db
          #   returns a redis client bound to redisURL:dbNum
          #   the redis client can is cached globally by redisURL:dbNum
          #   defaults redisURL to redis::localhost:6379
          #   defaults dbNum to 0
      */

      rorm_db: function() {
        var dbNum, lookup, url;
        if (this._rorm_db != null) {
          return this._rorm_db;
        }
        url = this.mixinConfig.url || global.redisURL || global.REDIS_URL || process.env.REDIS_URL || process.env.REDISTOGO_URL || 'redis://127.0.0.1:6379/';
        dbNum = this.mixinConfig.dbNum || global.dbNum || 0;
        lookup = "" + url + "[" + dbNum + "]";
        global.rorm_redisClients || (global.rorm_redisClients = {});
        rorm_redisClients[lookup] || (rorm_redisClients[lookup] = (require('redis-url')).connect(url).select(dbNum));
        return this._rorm_db = rorm_redisClients[lookup];
      },
      find: function(info) {}
    };

    RedisORM.addTheseToInstance = {
      rorm_class: function() {
        return this.constructor;
      },
      rorm_refKey: function() {
        return rorm_refKeyFor(this);
      },
      rorm_refKeyFor: function(obj) {
        return this.rorm_class().rorm_prefix + obj.constructor.name + this.rorm_class().rorm_delim + obj.id;
      },
      save: function() {
        var atts;
        return atts = this.rorm_atts();
      },
      rorm_atts: function() {
        var fields, k, pair, v;
        fields = {};
        for (k in this) {
          v = this[k];
          pair = this.rorm_keyValueFor(k, v);
          if (!pair) {
            continue;
          }
          fields[pair.key] = pair.value;
        }
        return fields;
      },
      rorm_keyValueFor: function(key, value) {
        var typeOfVal;
        if (key.startsWith('rorm_')) {
          return null;
        }
        typeOfVal = typeof value;
        if (typeOfVal === this.rorm_class().rorm_TYPE_FUNCTION) {
          return null;
        }
        return {
          key: key,
          value: this.rorm_valueFor(typeOfVal, value)
        };
      },
      rorm_valueFor: function(typeOfValue, value) {
        var v;
        if (typeOfValue === this.rorm_class().rorm_TYPE_OBJECT && (value.constructor != null) && Object !== value.constructor) {
          if (this.rorm_class().rorm_CLASS_ARRAY === value.constructor.name) {
            v = this.rorm_arrayFor(value);
          } else {
            v = this.rorm_refKeyFor(value);
          }
        }
        return v || (v = value);
      },
      rorm_arrayFor: function(array) {
        return array;
      }
    };

    return RedisORM;

  })(Mixin);

  global.RedisORM = RedisORM;

}).call(this);
