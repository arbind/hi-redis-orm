// Generated by CoffeeScript 1.4.0
(function() {
  var ModelBase, mixinKeywords,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  mixinKeywords = ['extended', 'included'];

  ModelBase = (function() {

    ModelBase.configuration = {
      redisURL: process.env.REDIS_URL || process.env.REDISTOGO_URL || 'redis://127.0.0.1:6379/',
      dbNumber: ORM_ENV.redis.dbNum
    };

    ModelBase.prototype._attributes = null;

    ModelBase.prototype._refs = null;

    ModelBase.extend = function(module) {
      var key, value, _ref;
      for (key in module) {
        value = module[key];
        if (__indexOf.call(mixinKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if ((_ref = module.extended) != null) {
        _ref.apply(this);
      }
      return this;
    };

    ModelBase.include = function(module) {
      var key, value, _ref;
      for (key in module) {
        value = module[key];
        if (__indexOf.call(mixinKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if ((_ref = module.included) != null) {
        _ref.apply(this);
      }
      return this;
    };

    function ModelBase(attributes) {
      this.emitTo = __bind(this.emitTo, this);

      this.toEvent = __bind(this.toEvent, this);

      this.toJSON = __bind(this.toJSON, this);

      this._loadRef = __bind(this._loadRef, this);

      this._loadRefs = __bind(this._loadRefs, this);

      this._getRef = __bind(this._getRef, this);

      this._setRef = __bind(this._setRef, this);

      this.setFields = __bind(this.setFields, this);

      this._set = __bind(this._set, this);

      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);

      this.id = __bind(this.id, this);

      this.className = __bind(this.className, this);
      this._attributes = attributes || {};
      this._refs = {};
      this._loadRefs();
      if (!this._attributes.isHash()) {
        throw "These attributes must be a hash not " + this._attributes.constructor.name;
      }
      if (!((attributes != null) && isPresent(attributes))) {
        return;
      }
      this.setFields(attributes);
    }

    ModelBase.prototype.className = function() {
      return this.constructor.name;
    };

    ModelBase.prototype.id = function() {
      return this.get('id');
    };

    ModelBase.prototype.get = function(attName) {
      return this._attributes[attName] || this._getRef(attName) || null;
    };

    ModelBase.prototype.set = function(attName, value) {
      return this._set(attName, value);
    };

    ModelBase.prototype._set = function(attName, value) {
      if (!attName) {
        return;
      }
      if (value instanceof ModelBase) {
        return this._setRef(attName, value);
      } else {
        return this._attributes[attName] = value;
      }
    };

    ModelBase.prototype.setFields = function(atts) {
      var field, _i, _len, _ref, _results;
      if (atts != null) {
        _ref = this.classFieldNames;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          field = _ref[_i];
          _results.push(atts[field] != null ? this._set(field, atts[field]) : void 0);
        }
        return _results;
      }
    };

    ModelBase.prototype._setRef = function(name, obj) {
      var _base;
      (_base = this._attributes)._refIds || (_base._refIds = {});
      this._attributes._refIds[name] = obj.id();
      return this._refs[name] = obj;
    };

    ModelBase.prototype._getRef = function(name) {
      var _ref;
      if (this._refs[name] != null) {
        return this._refs[name];
      }
      if (((_ref = this._attributes._refIds) != null ? _ref[name] : void 0) == null) {
        return null;
      }
      return this._refs[name] = this._loadRef(name, this._attributes._refIds[name]);
    };

    ModelBase.prototype._loadRefs = function() {
      var nextRef, refId, refName, _i, _len, _ref,
        _this = this;
      if (!this._attributes._refIds) {
        return;
      }
      if (this._attributes._refIds.keys().length === this._refs.keys().length) {
        return;
      }
      nextRef = null;
      _ref = this._attributes._refIds;
      for (refId = _i = 0, _len = _ref.length; _i < _len; refId = ++_i) {
        refName = _ref[refId];
        if (this._refs[refName] == null) {
          nextRef || (nextRef = refName);
        }
      }
      return this._loadRef(name, this._attributes._refIds[name], function(err, obj) {
        _this._refs[name] = obj || null;
        return _this._loadRefs();
      });
    };

    ModelBase.prototype._loadRef = function(name, id, callback) {
      var svcClass, svcClassName;
      svcClassName = name.toTitleCase() + "Service";
      svcClass = global[svcClassName];
      return svcClass.find(id, callback);
    };

    ModelBase.prototype.toJSON = function() {
      return JSON.stringify(this._attributes);
    };

    ModelBase.prototype.toEvent = function() {
      var atts, fieldName, obj, objName, _i, _len, _ref, _ref1;
      atts = Object.merge({}, this._attributes);
      if (this.privateFields != null) {
        _ref = this.privateFields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          fieldName = _ref[_i];
          delete atts[fieldName];
        }
      }
      delete atts['_refIds'];
      _ref1 = this._refs;
      for (objName in _ref1) {
        if (!__hasProp.call(_ref1, objName)) continue;
        obj = _ref1[objName];
        if (obj != null ? typeof obj.toEvent === "function" ? obj.toEvent() : void 0 : void 0) {
          atts[objName] = obj.toEvent();
        }
      }
      return atts;
    };

    ModelBase.prototype.emitTo = function(channel) {
      var _ref, _ref1;
      if (((_ref = channel.manager) != null ? (_ref1 = _ref.settings) != null ? _ref1.transports : void 0 : void 0) != null) {
        return channel.emit(this.className(), this.toEvent());
      } else {
        return channel.emit(this.className(), this);
      }
    };

    return ModelBase;

  })();

  module.exports = global.ModelBase = ModelBase;

}).call(this);
