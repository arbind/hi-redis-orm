// Generated by CoffeeScript 1.4.0
(function() {
  var _base, _base1, _base10, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  global.isPresent || (global.isPresent = function(obj) {
    var key, val;
    if (obj == null) {
      return false;
    }
    for (key in obj) {
      if (!__hasProp.call(obj, key)) continue;
      val = obj[key];
      return true;
    }
    return false;
  });

  global.isEmpty = function(obj) {
    return !isPresent(obj);
  };

  global.isString = function(thing) {
    return 'string' === typeof thing || thing instanceof String;
  };

  global.isNumber = function(thing) {
    return 'number' === typeof thing || thing instanceof Number;
  };

  global.isHash = function(thing) {
    var key, val;
    if (Object !== (thing != null ? thing.constructor : void 0)) {
      return false;
    }
    if (!(function() {
      var _results;
      _results = [];
      for (key in thing) {
        if (!__hasProp.call(thing, key)) continue;
        val = thing[key];
        _results.push('string' === typeof key);
      }
      return _results;
    })()) {
      return false;
    }
    return true;
  };

  Object.merge || (Object.merge = function() {
    var hash, hashList, key, targetHash, val, _i, _len;
    targetHash = arguments[0], hashList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = hashList.length; _i < _len; _i++) {
      hash = hashList[_i];
      for (key in hash) {
        if (!__hasProp.call(hash, key)) continue;
        val = hash[key];
        targetHash[key] = val;
      }
    }
    return targetHash;
  });

  /*
  Sources:
  http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
  */


  (_base = String.prototype).upcase || (_base.upcase = function() {
    return this.toUpperCase();
  });

  (_base1 = String.prototype).trim || (_base1.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  });

  (_base2 = String.prototype).ltrim || (_base2.ltrim = function() {
    return this.replace(/^\s+/g, "");
  });

  (_base3 = String.prototype).rtrim || (_base3.rtrim = function() {
    return this.replace(/\s+$/g, "");
  });

  (_base4 = String.prototype).tokens || (_base4.tokens = function(delim) {
    var item, list;
    list = this.split(delim);
    return list = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item.trim());
      }
      return _results;
    })();
  });

  (_base5 = String.prototype).startsWith || (_base5.startsWith = function(needle) {
    return 0 === this.indexOf(needle);
  });

  (_base6 = String.prototype).toCamel || (_base6.toCamel = function() {
    return this.replace(/(\-[a-z,A-Z])/g, function($1) {
      return $1.toUpperCase().replace('-', '');
    });
  });

  (_base7 = String.prototype).toDash || (_base7.toDash = function() {
    return this.replace(/([A-Z])/g, function($1) {
      return "-" + $1.toLowerCase();
    });
  });

  (_base8 = String.prototype).toUnderscore || (_base8.toUnderscore = function() {
    return this.replace(/([A-Z])/g, function($1) {
      return "_" + $1.toLowerCase();
    });
  });

  (_base9 = String.prototype).toTitleCase || (_base9.toTitleCase = function() {
    return this.replace(/(?:^|\s)\w/g, function($1) {
      return $1.toUpperCase();
    });
  });

  (_base10 = String.prototype).toClassName || (_base10.toClassName = function() {
    return this.toCamel().toTitleCase();
  });

}).call(this);
