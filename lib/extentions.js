// Generated by CoffeeScript 1.4.0
(function() {
  var _base, _base1, _base10, _base11, _base12, _base13, _base14, _base15, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  global.isPresent || (global.isPresent = function(obj) {
    var key, val;
    if (obj == null) {
      return false;
    }
    for (key in obj) {
      if (!__hasProp.call(obj, key)) continue;
      val = obj[key];
      return true;
    }
    return false;
  });

  global.isEmpty = function(obj) {
    return !isPresent(obj);
  };

  global.isString = function(thing) {
    return 'string' === typeof thing || thing instanceof String;
  };

  global.isNumber = function(thing) {
    return 'number' === typeof thing || thing instanceof Number;
  };

  Object.merge || (Object.merge = function() {
    var hash, hashList, key, targetHash, val, _i, _len;
    targetHash = arguments[0], hashList = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = hashList.length; _i < _len; _i++) {
      hash = hashList[_i];
      for (key in hash) {
        if (!__hasProp.call(hash, key)) continue;
        val = hash[key];
        targetHash[key] = val;
      }
    }
    return targetHash;
  });

  (_base = Object.prototype).inject || (_base.inject = function() {
    var hash, hashList, key, val, _i, _len;
    hashList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = hashList.length; _i < _len; _i++) {
      hash = hashList[_i];
      for (key in hash) {
        if (!__hasProp.call(hash, key)) continue;
        val = hash[key];
        this[key] = val;
      }
    }
    return this;
  });

  (_base1 = Object.prototype).select || (_base1.select = function(fnSelect) {
    var h, k, v;
    h = {};
    if ((function() {
      var _i, _len, _results;
      _results = [];
      for (v = _i = 0, _len = this.length; _i < _len; v = ++_i) {
        k = this[v];
        _results.push(fnSelect(k, val));
      }
      return _results;
    }).call(this)) {
      k[k] = val;
    }
    return h;
  });

  (_base2 = Object.prototype).keys || (_base2.keys = function() {
    var key, val, _results;
    _results = [];
    for (key in this) {
      if (!__hasProp.call(this, key)) continue;
      val = this[key];
      _results.push(key);
    }
    return _results;
  });

  (_base3 = Object.prototype).isHash || (_base3.isHash = function() {
    var key, ok, val;
    ok = true;
    if (Object !== this.constructor) {
      ok = false;
    }
    if (!(function() {
      var _results;
      _results = [];
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        val = this[key];
        _results.push('string' === typeof this[key]);
      }
      return _results;
    }).call(this)) {
      ok = false;
    }
    return ok;
  });

  (_base4 = Object.prototype).contains || (_base4.contains = function(obj) {
    var key, ok;
    if (!((obj != null) && (typeof obj.isHash === "function" ? obj.isHash() : void 0))) {
      return false;
    }
    ok = true;
    for (key in obj) {
      if (!__hasProp.call(obj, key)) continue;
      ok && (ok = this[key] === obj[key]);
    }
    return ok;
  });

  /*
  Sources:
  http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/
  */


  (_base5 = String.prototype).upcase || (_base5.upcase = function() {
    return this.toUpperCase();
  });

  (_base6 = String.prototype).trim || (_base6.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
  });

  (_base7 = String.prototype).ltrim || (_base7.ltrim = function() {
    return this.replace(/^\s+/g, "");
  });

  (_base8 = String.prototype).rtrim || (_base8.rtrim = function() {
    return this.replace(/\s+$/g, "");
  });

  (_base9 = String.prototype).tokens || (_base9.tokens = function(delim) {
    var item, list;
    list = this.split(delim);
    return list = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        _results.push(item.trim());
      }
      return _results;
    })();
  });

  (_base10 = String.prototype).startsWith || (_base10.startsWith = function(needle) {
    return 0 === this.indexOf(needle);
  });

  (_base11 = String.prototype).toCamel || (_base11.toCamel = function() {
    return this.replace(/(\-[a-z,A-Z])/g, function($1) {
      return $1.toUpperCase().replace('-', '');
    });
  });

  (_base12 = String.prototype).toDash || (_base12.toDash = function() {
    return this.replace(/([A-Z])/g, function($1) {
      return "-" + $1.toLowerCase();
    });
  });

  (_base13 = String.prototype).toUnderscore || (_base13.toUnderscore = function() {
    return this.replace(/([A-Z])/g, function($1) {
      return "_" + $1.toLowerCase();
    });
  });

  (_base14 = String.prototype).toTitleCase || (_base14.toTitleCase = function() {
    return this.replace(/(?:^|\s)\w/g, function($1) {
      return $1.toUpperCase();
    });
  });

  (_base15 = String.prototype).toClassName || (_base15.toClassName = function() {
    return this.toCamel().toTitleCase();
  });

}).call(this);
